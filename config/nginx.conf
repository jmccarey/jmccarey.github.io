daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

# user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead

events {
  use epoll;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  sendfile on;
  gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header

  log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/tmp/nginx.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  # server {
  #   # if no Host match, close the connection to prevent host spoofing
  #   listen [::]:80 default_server;
  #   return 444;
  # }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen <%= ENV["PORT"] %>;
    client_max_body_size 4G;
    proxy_intercept_errors on;

    # set the correct host(s) for your site
    server_name _;

    keepalive_timeout 5;

    root www/static;

    location / {
      try_files $uri @proxy_to_app;
    }

    location /resume/ {
      alias www/static/media/;
      return 302 Joseph_McCarey_Resume(public).pdf;
    }  


    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 403 404 500 502 503 504 /error;
    location /error {
      root www/templates;
      try_files error.html @proxy_to_app;
    }

  }
}